#!/bin/bash
# ed_video by Leonardo Bernardes
# The script required the "zenity" package installed to be used
# In debian based distros you can install it using this command:
# apt install zenity

FONT_CONFIG='FontName=Segoe UI Bold,Fontsize=25,PrimaryColour=&H00FFFF&'
ARGS="$@"

[[ $LANGUAGE == "pt_BR" ]] && { 
    LAST="1) CORTAR\n2) CORTAR_COM_LEGENDAS\n3) LEGENDAS\n4) CORTAR LEGENDA\n5) SAIR"
    INICIO="Início"
    FIM="Fim"
    LEGENDA="Legenda convertida pro código de caratéres UTF-8"
    UM="O registro do tempo precisa ter 4 ou 6 digitos, obrigatoriamente! 1:03 precisa ser 0103"
    DOIS="Alguma das variáveis é nula"
    TRES="Cortar vídeo..."
    QUATRO="Cortar vídeo com legenda..."
    CINCO="Gravar legenda..."
    SEIS="Opção inválida"
    SETE="Cortar legendas..."
    TERM="Terminado!"
    OITO="S"
}

[[ $LANGUAGE == "en_US" ]] || [[ -z $LANGUAGE ]] || [[ $LANGUAGE != "pt_BR" ]] && {
    LAST="1) TO CUT\n2) TO CUT WITH SUBTITLES\n3) TO HARDCODE SUBTITLES\n4) TO CUT SUBTITLES\n5) EXIT"
    INICIO="Beginning"
    FIM="End"
    LEGENDA="Subtitle converted to UTF-8 charset"
    UM="Time register must necessarily have 4 or 6 digits! 1:03 must be 0103"
    DOIS="Some variable is null"
    TRES="To cut video..."
    QUATRO="To cut with subtitles..."
    CINCO="To hardcode subtitles..."
    SEIS="Invalid option"
    SETE="To cut subtitles..."
    TERM="Finished!"
}

_getData() {
    [[ -e $ARGS ]] && file="$ARGS" || file="$(zenity --title="File" --file-selection 2> /dev/null)"
    filename="$(basename -- "$file")"
    dirname="$(dirname "$file")"
    extension="${filename##*.}"
    output="$(zenity --title="Output file" --text "Name?" --entry 2> /dev/null)"
}

_getTime() {
    echo -n "$INICIO? 0123 " ; read inicio
    echo -n "$FIM?  0259 " ; read fim
    echo -e "$inicio $fim\n$output\n" >> "$dirname"/INFO

     [[ ! $(echo -n $inicio | wc -c) -eq 4 ]] && 
        [[ ! $(echo -n $inicio | wc -c) -eq 4 ]] && echo "$UM" && exit 1
    
    [[ $(echo -n $inicio | wc -c) -eq  4 ]] && inicioData="${inicio:0:2}":"${inicio:2:2}" && fimData="${fim:0:2}":"${fim:2:2}"
    [[ $(echo -n $inicio | wc -c) -eq  6 ]] && inicioData="${inicioData}" &&
        fimData="${DfimData:2}"
}

_validateData() {
    [[ -z $output || -z $inicio || -z $fim ]] && echo "$DOIS" && exit 1
}

_runCommand() {
    eval $cmd
    echo $cmd | xclip -i -selection clipboard
    notify-send -u critical -t 600 -i task-due "ED_VIDEO" "$TERM"
}


cutVideo() {
    _getData
    _getTime
    _validateData
    [[ $extension == "mkv" ]] && scodec="srt" || scodec="mov_text"

    [[ -z $1 ]] && cmd="ffmpeg -i \"$file\" -ss "${inicioData}" -to "${fimData}" -acodec copy -vcodec h264 -qp 12  \"$dirname\"/"${output// /_}".mp4"
    [[ -n $1 ]] && {
        sub="$(zenity --title="Subtitle" --file-selection --filename="$file" 2> /dev/null)"
        # check if subtitle file is coded in utf-8 charset. Otherwise we will get an error while encoding the video
        charset="$(file -i "$sub" |tr ' ' '\n' |grep -i charset |cut -d= -f2)"
        if [  "$charset" != "utf-8" ]; then
            new_name="$dirname"/$(mktemp -u legenda_XXXXXX).srt
            iconv -f "$charset" -t utf-8 "$sub" -o "$new_name"
            sub="$new_name"
            echo "$LEGENDA"
            [[ -n $(cat "$sub" |grep -i font ) ]] && sed -i -e 's/<[^>]*>//g' -e 's/^ //' "$sub"
        fi
        cmd="ffmpeg -i \"$file\" -i \"$sub\" -ss "${inicioData}" -to "${fimData}" -scodec $scodec -acodec copy -vcodec h264 -qp 12 \"$dirname\"/"${output// /_}".mp4"
        ffmpeg -i "$sub" -ss "${inicioData}" -to "${fimData}" "$dirname"/"${output// /_}".srt
    }

    _runCommand
}

cutSubtitles() {
    sub="$(zenity --title="Input file" --file-selection 2> /dev/null)"
    output="$(zenity --title="Output file" --text "Name?" --entry 2> /dev/null).srt"
    charset="$(file -i "$sub" |tr ' ' '\n' |grep -i charset |cut -d= -f2)"
    if [  "$charset" != "utf-8" ]; then
        new_name="$dirname"/$(mktemp -u legenda_XXXXXX).srt
        iconv -f "$charset" -t utf-8 "$sub" -o "$new_name"
        sub="$new_name"
        echo "$sub"
        echo "$LEGENDA"
        [[ -n $(cat "$sub" |grep -i font ) ]] && sed -i -e 's/<[^>]*>//g' -e 's/^ //' "$sub"
    fi

    _getTime
    _validateData
    
    cmd="ffmpeg -i \"$sub\" -ss "${inicioData}" -to "${fimData}" -scodec copy \"$dirname\"/"${output// /_}""
    _runCommand
    [[ -e "$new_name" ]] && rm "$new_name"
}

subtitleHardcoded() {
    _getData
    name="${filename%.*}"
    
    [[ -e $dirname/$name.srt ]] && sub="$dirname/$name.srt" || sub="$(zenity --title="Subtitle" --file-selection --filename="$dirname" 2> /dev/null)"
    [[ -n $(cat $sub |grep -i font ) ]] && sed -i -e 's/<[^>]*>//g' -e 's/^ //' "$sub"
    
    cmd="ffmpeg -i \"$file\" -vf \"subtitles='${sub}':force_style='${FONT_CONFIG}'\" -crf 14 -max_muxing_queue_size 1024 \"$dirname\"/"${output// /_}".mp4"
    _runCommand
}

echo -e "$LAST"

while [[ ($resp != 1) && ($resp != 2) && ($resp != 3) && ($resp != 4) && ($resp != 5) ]]
do
    read -p "#) " resp
    case $resp in
        1) echo "$TRES"
        cutVideo
        ;; 
        2) echo "$QUATRO"
        cutVideo sub
        ;;
        3) echo "$CINCO"
        subtitleHardcoded
        ;;
        4) echo "$SETE"
        cutSubtitles
        ;;
        5) echo "$OITO"
        exit 0
        ;;
        *) echo "$SEIS"
    esac
done